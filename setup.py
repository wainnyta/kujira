#!/usr/bin/env python3
"""
Cryptocurrency Trading Bot Setup Script
Helps users configure and initialize the trading bot system
"""

import os
import sys
import secrets
import subprocess
from pathlib import Path

def print_banner():
    """Print welcome banner"""
    print("=" * 60)
    print("🤖 CRYPTOCURRENCY TRADING BOT SETUP")
    print("=" * 60)
    print("This script will help you set up your trading bot system.")
    print("Please have your API keys ready before proceeding.\n")

def check_python_version():
    """Check if Python version is compatible"""
    if sys.version_info < (3, 8):
        print("❌ Error: Python 3.8 or higher is required")
        print(f"Current version: {sys.version}")
        sys.exit(1)
    print(f"✅ Python version: {sys.version.split()[0]}")

def create_directories():
    """Create necessary directories"""
    directories = ['logs', 'backups', 'data']
    for directory in directories:
        Path(directory).mkdir(exist_ok=True)
        print(f"✅ Created directory: {directory}")

def setup_environment():
    """Set up environment variables"""
    print("\n📝 ENVIRONMENT SETUP")
    print("-" * 30)
    
    env_file = Path('.env')
    if env_file.exists():
        overwrite = input("⚠️  .env file already exists. Overwrite? (y/N): ").lower()
        if overwrite != 'y':
            print("Skipping environment setup...")
            return
    
    # Generate encryption key
    encryption_key = secrets.token_urlsafe(32)
    
    print("\n🔑 API KEYS CONFIGURATION")
    print("You can skip any API key by pressing Enter (can be configured later)")
    
    # DeepSeek API Key
    deepseek_key = input("\nDeepSeek API Key (required for AI analysis): ").strip()
    if not deepseek_key:
        print("⚠️  Warning: DeepSeek API key is required for AI functionality")
    
    # Binance API Keys
    print("\n📊 BINANCE CONFIGURATION (Recommended)")
    binance_key = input("Binance API Key (testnet): ").strip()
    binance_secret = input("Binance API Secret (testnet): ").strip()
    
    # Coinbase API Keys
    print("\n🏦 COINBASE CONFIGURATION (Optional)")
    coinbase_key = input("Coinbase API Key (sandbox): ").strip()
    coinbase_secret = input("Coinbase API Secret (sandbox): ").strip()
    coinbase_passphrase = input("Coinbase Passphrase (sandbox): ").strip()
    
    # Trading Configuration
    print("\n⚙️  TRADING CONFIGURATION")
    risk_percentage = input("Default risk per trade (1.0%): ").strip() or "1.0"
    max_positions = input("Maximum positions per account (3): ").strip() or "3"
    daily_loss_limit = input("Daily loss limit percentage (5.0%): ").strip() or "5.0"
    
    # Write .env file
    env_content = f"""# Cryptocurrency Trading Bot Configuration
# Generated by setup script

# AI Model Configuration
DEEPSEEK_API_KEY={deepseek_key}

# Exchange API Keys (Testnet)
BINANCE_API_KEY={binance_key}
BINANCE_API_SECRET={binance_secret}

COINBASE_API_KEY={coinbase_key}
COINBASE_API_SECRET={coinbase_secret}
COINBASE_PASSPHRASE={coinbase_passphrase}

# Security
ENCRYPTION_KEY={encryption_key}

# Flask Configuration
FLASK_ENV=development
FLASK_DEBUG=True

# Database Configuration
DATABASE_URL=sqlite:///database/app.db

# Trading Configuration
DEFAULT_RISK_PERCENTAGE={risk_percentage}
MAX_POSITIONS_PER_ACCOUNT={max_positions}
DAILY_LOSS_LIMIT_PERCENTAGE={daily_loss_limit}

# Logging
LOG_LEVEL=INFO
LOG_FILE=logs/trading_bot.log
"""
    
    with open('.env', 'w') as f:
        f.write(env_content)
    
    print("✅ Environment configuration saved to .env")

def install_dependencies():
    """Install Python dependencies"""
    print("\n📦 INSTALLING DEPENDENCIES")
    print("-" * 30)
    
    try:
        # Check if virtual environment exists
        venv_path = Path('venv')
        if not venv_path.exists():
            print("Creating virtual environment...")
            subprocess.run([sys.executable, '-m', 'venv', 'venv'], check=True)
        
        # Activate virtual environment and install dependencies
        if os.name == 'nt':  # Windows
            pip_path = venv_path / 'Scripts' / 'pip'
        else:  # Unix/Linux
            pip_path = venv_path / 'bin' / 'pip'
        
        print("Installing dependencies...")
        subprocess.run([str(pip_path), 'install', '-r', 'requirements.txt'], check=True)
        print("✅ Dependencies installed successfully")
        
    except subprocess.CalledProcessError as e:
        print(f"❌ Error installing dependencies: {e}")
        return False
    
    return True

def initialize_database():
    """Initialize the database"""
    print("\n🗄️  INITIALIZING DATABASE")
    print("-" * 30)
    
    try:
        # Import and initialize database
        sys.path.insert(0, 'src')
        from src.models.trading import db
        from src.models.user import db as user_db
        from flask import Flask
        
        app = Flask(__name__)
        app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///src/database/app.db'
        app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
        
        db.init_app(app)
        user_db.init_app(app)
        
        with app.app_context():
            db.create_all()
            user_db.create_all()
        
        print("✅ Database initialized successfully")
        return True
        
    except Exception as e:
        print(f"❌ Error initializing database: {e}")
        return False

def create_startup_script():
    """Create startup script"""
    print("\n🚀 CREATING STARTUP SCRIPT")
    print("-" * 30)
    
    if os.name == 'nt':  # Windows
        script_content = """@echo off
echo Starting Cryptocurrency Trading Bot...
cd /d "%~dp0"
call venv\\Scripts\\activate
python src\\main.py
pause
"""
        script_name = 'start_bot.bat'
    else:  # Unix/Linux
        script_content = """#!/bin/bash
echo "Starting Cryptocurrency Trading Bot..."
cd "$(dirname "$0")"
source venv/bin/activate
python src/main.py
"""
        script_name = 'start_bot.sh'
    
    with open(script_name, 'w') as f:
        f.write(script_content)
    
    if os.name != 'nt':
        os.chmod(script_name, 0o755)
    
    print(f"✅ Startup script created: {script_name}")

def print_completion_message():
    """Print completion message with instructions"""
    print("\n" + "=" * 60)
    print("🎉 SETUP COMPLETE!")
    print("=" * 60)
    
    print("\n📋 NEXT STEPS:")
    print("1. Review your configuration in the .env file")
    print("2. Get your API keys from:")
    print("   • DeepSeek: https://platform.deepseek.com/")
    print("   • Binance Testnet: https://testnet.binance.vision/")
    print("   • Coinbase Sandbox: https://public.sandbox.exchange.coinbase.com/")
    
    print("\n🚀 TO START THE BOT:")
    if os.name == 'nt':
        print("   Double-click start_bot.bat")
        print("   OR run: python src/main.py")
    else:
        print("   Run: ./start_bot.sh")
        print("   OR run: python src/main.py")
    
    print("\n🌐 WEB INTERFACE:")
    print("   Open http://localhost:5000 in your browser")
    
    print("\n⚠️  IMPORTANT REMINDERS:")
    print("   • Start with testnet/sandbox APIs for safety")
    print("   • Never risk more than you can afford to lose")
    print("   • Monitor the bot regularly")
    print("   • Keep your API keys secure")
    
    print("\n📚 DOCUMENTATION:")
    print("   • README.md - Basic usage instructions")
    print("   • Architecture documentation in docs/")
    print("   • API reference at http://localhost:5000/api/docs")
    
    print("\n" + "=" * 60)

def main():
    """Main setup function"""
    print_banner()
    
    try:
        check_python_version()
        create_directories()
        setup_environment()
        
        if install_dependencies():
            initialize_database()
            create_startup_script()
            print_completion_message()
        else:
            print("❌ Setup failed during dependency installation")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n\n❌ Setup cancelled by user")
        sys.exit(1)
    except Exception as e:
        print(f"\n❌ Setup failed with error: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()

